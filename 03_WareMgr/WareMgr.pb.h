// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WareMgr.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_WareMgr_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_WareMgr_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_WareMgr_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_WareMgr_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_WareMgr_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_WareMgr_2eproto_metadata_getter(int index);
class WareDataProto;
struct WareDataProtoDefaultTypeInternal;
extern WareDataProtoDefaultTypeInternal _WareDataProto_default_instance_;
class WareItemProto;
struct WareItemProtoDefaultTypeInternal;
extern WareItemProtoDefaultTypeInternal _WareItemProto_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::WareDataProto* Arena::CreateMaybeMessage<::WareDataProto>(Arena*);
template<> ::WareItemProto* Arena::CreateMaybeMessage<::WareItemProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class WareItemProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:WareItemProto) */ {
 public:
  inline WareItemProto() : WareItemProto(nullptr) {}
  virtual ~WareItemProto();
  explicit constexpr WareItemProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WareItemProto(const WareItemProto& from);
  WareItemProto(WareItemProto&& from) noexcept
    : WareItemProto() {
    *this = ::std::move(from);
  }

  inline WareItemProto& operator=(const WareItemProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline WareItemProto& operator=(WareItemProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WareItemProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const WareItemProto* internal_default_instance() {
    return reinterpret_cast<const WareItemProto*>(
               &_WareItemProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(WareItemProto& a, WareItemProto& b) {
    a.Swap(&b);
  }
  inline void Swap(WareItemProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WareItemProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WareItemProto* New() const final {
    return CreateMaybeMessage<WareItemProto>(nullptr);
  }

  WareItemProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WareItemProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WareItemProto& from);
  void MergeFrom(const WareItemProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WareItemProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "WareItemProto";
  }
  protected:
  explicit WareItemProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_WareMgr_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kNumFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 num = 2;
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num() const;
  void _internal_set_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:WareItemProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_WareMgr_2eproto;
};
// -------------------------------------------------------------------

class WareDataProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:WareDataProto) */ {
 public:
  inline WareDataProto() : WareDataProto(nullptr) {}
  virtual ~WareDataProto();
  explicit constexpr WareDataProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WareDataProto(const WareDataProto& from);
  WareDataProto(WareDataProto&& from) noexcept
    : WareDataProto() {
    *this = ::std::move(from);
  }

  inline WareDataProto& operator=(const WareDataProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline WareDataProto& operator=(WareDataProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WareDataProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const WareDataProto* internal_default_instance() {
    return reinterpret_cast<const WareDataProto*>(
               &_WareDataProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(WareDataProto& a, WareDataProto& b) {
    a.Swap(&b);
  }
  inline void Swap(WareDataProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WareDataProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WareDataProto* New() const final {
    return CreateMaybeMessage<WareDataProto>(nullptr);
  }

  WareDataProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WareDataProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WareDataProto& from);
  void MergeFrom(const WareDataProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WareDataProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "WareDataProto";
  }
  protected:
  explicit WareDataProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_WareMgr_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatasFieldNumber = 2,
    kItemsFieldNumber = 3,
    kNameFieldNumber = 1,
  };
  // repeated .WareDataProto datas = 2;
  int datas_size() const;
  private:
  int _internal_datas_size() const;
  public:
  void clear_datas();
  ::WareDataProto* mutable_datas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WareDataProto >*
      mutable_datas();
  private:
  const ::WareDataProto& _internal_datas(int index) const;
  ::WareDataProto* _internal_add_datas();
  public:
  const ::WareDataProto& datas(int index) const;
  ::WareDataProto* add_datas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WareDataProto >&
      datas() const;

  // repeated .WareItemProto items = 3;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::WareItemProto* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WareItemProto >*
      mutable_items();
  private:
  const ::WareItemProto& _internal_items(int index) const;
  ::WareItemProto* _internal_add_items();
  public:
  const ::WareItemProto& items(int index) const;
  ::WareItemProto* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WareItemProto >&
      items() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:WareDataProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WareDataProto > datas_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WareItemProto > items_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_WareMgr_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WareItemProto

// string name = 1;
inline void WareItemProto::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& WareItemProto::name() const {
  // @@protoc_insertion_point(field_get:WareItemProto.name)
  return _internal_name();
}
inline void WareItemProto::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:WareItemProto.name)
}
inline std::string* WareItemProto::mutable_name() {
  // @@protoc_insertion_point(field_mutable:WareItemProto.name)
  return _internal_mutable_name();
}
inline const std::string& WareItemProto::_internal_name() const {
  return name_.Get();
}
inline void WareItemProto::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void WareItemProto::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:WareItemProto.name)
}
inline void WareItemProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:WareItemProto.name)
}
inline void WareItemProto::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:WareItemProto.name)
}
inline std::string* WareItemProto::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* WareItemProto::release_name() {
  // @@protoc_insertion_point(field_release:WareItemProto.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WareItemProto::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:WareItemProto.name)
}

// uint32 num = 2;
inline void WareItemProto::clear_num() {
  num_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WareItemProto::_internal_num() const {
  return num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WareItemProto::num() const {
  // @@protoc_insertion_point(field_get:WareItemProto.num)
  return _internal_num();
}
inline void WareItemProto::_internal_set_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num_ = value;
}
inline void WareItemProto::set_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:WareItemProto.num)
}

// -------------------------------------------------------------------

// WareDataProto

// string name = 1;
inline void WareDataProto::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& WareDataProto::name() const {
  // @@protoc_insertion_point(field_get:WareDataProto.name)
  return _internal_name();
}
inline void WareDataProto::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:WareDataProto.name)
}
inline std::string* WareDataProto::mutable_name() {
  // @@protoc_insertion_point(field_mutable:WareDataProto.name)
  return _internal_mutable_name();
}
inline const std::string& WareDataProto::_internal_name() const {
  return name_.Get();
}
inline void WareDataProto::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void WareDataProto::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:WareDataProto.name)
}
inline void WareDataProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:WareDataProto.name)
}
inline void WareDataProto::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:WareDataProto.name)
}
inline std::string* WareDataProto::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* WareDataProto::release_name() {
  // @@protoc_insertion_point(field_release:WareDataProto.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WareDataProto::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:WareDataProto.name)
}

// repeated .WareDataProto datas = 2;
inline int WareDataProto::_internal_datas_size() const {
  return datas_.size();
}
inline int WareDataProto::datas_size() const {
  return _internal_datas_size();
}
inline void WareDataProto::clear_datas() {
  datas_.Clear();
}
inline ::WareDataProto* WareDataProto::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:WareDataProto.datas)
  return datas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WareDataProto >*
WareDataProto::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:WareDataProto.datas)
  return &datas_;
}
inline const ::WareDataProto& WareDataProto::_internal_datas(int index) const {
  return datas_.Get(index);
}
inline const ::WareDataProto& WareDataProto::datas(int index) const {
  // @@protoc_insertion_point(field_get:WareDataProto.datas)
  return _internal_datas(index);
}
inline ::WareDataProto* WareDataProto::_internal_add_datas() {
  return datas_.Add();
}
inline ::WareDataProto* WareDataProto::add_datas() {
  // @@protoc_insertion_point(field_add:WareDataProto.datas)
  return _internal_add_datas();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WareDataProto >&
WareDataProto::datas() const {
  // @@protoc_insertion_point(field_list:WareDataProto.datas)
  return datas_;
}

// repeated .WareItemProto items = 3;
inline int WareDataProto::_internal_items_size() const {
  return items_.size();
}
inline int WareDataProto::items_size() const {
  return _internal_items_size();
}
inline void WareDataProto::clear_items() {
  items_.Clear();
}
inline ::WareItemProto* WareDataProto::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:WareDataProto.items)
  return items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WareItemProto >*
WareDataProto::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:WareDataProto.items)
  return &items_;
}
inline const ::WareItemProto& WareDataProto::_internal_items(int index) const {
  return items_.Get(index);
}
inline const ::WareItemProto& WareDataProto::items(int index) const {
  // @@protoc_insertion_point(field_get:WareDataProto.items)
  return _internal_items(index);
}
inline ::WareItemProto* WareDataProto::_internal_add_items() {
  return items_.Add();
}
inline ::WareItemProto* WareDataProto::add_items() {
  // @@protoc_insertion_point(field_add:WareDataProto.items)
  return _internal_add_items();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WareItemProto >&
WareDataProto::items() const {
  // @@protoc_insertion_point(field_list:WareDataProto.items)
  return items_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_WareMgr_2eproto
